https://hydra.family/head-protocol/

Link to a set of Plutus docs:
https://plutus-apps.readthedocs.io/en/latest/plutus/explanations/pab.html#browser-wallet-in-progress

An example of how a Dapp-portal interacts with a browser based wallet (Nami) and a PAB (constructing the transaction).
Understanding this flow is essential for creating own Dapps.
https://github.com/input-output-hk/plutus-apps/tree/main/plutus-pab-executables/demo/pab-nami

## how to install and setup a cardano-node and cardano-cli ##
https://developers.cardano.org/docs/get-started/running-cardano


## hot to read the last entries on the chains:##
## Nice to see the status and compare with how far the sync your local cardano-node has come.... ##
https://explorer.cardano-testnet.iohkdev.io/en/browse-epochs


### The page that tells you how to create keys, and create receive addresses, transactions, sign them and submit them to the chain. ###
## Sending transactions requires that your local cardano-code is synched with the blockchain (otherwise, there is no UTXO to spend...): ###

https://developers.cardano.org/docs/stake-pool-course/handbook/create-simple-transaction/




Another Haskell tutorial portal:
https://livebook.manning.com/book/get-programming-with-haskell/chapter-1/5
pro 



/////////////////////////some work notes:


>> get the transaction hash and index of the utxo to spend:
./ccli query utxo --address $(cat keys/payment1.addr)  --testnet-magic 1097911063

                        TxHash                                 TxIx        Amount
--------------------------------------------------------------------------------------
41461790b6cb6f617d1bf6971bfd367726881f90fb1a5c9b3ab48657392addb9     0        1000000000 lovelace + TxOutDatumNone

----> %%%%%%%%%%%%%%%%%%%%%%%%%
Important! : Notice the "TxIx" = 0. This is the identification ("Transaction Index") of the outout UTXO(s) in this transaction.
In this transaction, there is only 1 output utxo. So, when I am going to spend this utxo as input in a later transaction (further down in my example), I have to give the value "0" as the <TxIx>.
The example/tutorial in the docs (https://developers.cardano.org/docs/stake-pool-course/handbook/create-simple-transaction/)
is using "#4" as value, without saying why, and this value (4)is wrong based on the example in that tutorial which is actually creating new adresses and creating a
new transaction  with your newly created input address and the number of outputs (unspent UTXO's) is actually 1 (TxIx=0).
A TxIx=4 indicates that the given input transaction contains 5 output UTXO's (0,1,2,3,4). 
So, in my example below I'm using TxIx=0 (since there is only 1 output UTXO in the specified "--tx-in".

-----> %%%%%%%%%%%%%%%%%%%%%%%

>>> Draft the transaction and save it in tx.draft:

./ccli transaction build-raw \
    --tx-in 41461790b6cb6f617d1bf6971bfd367726881f90fb1a5c9b3ab48657392addb9#0 \
    --tx-out $(cat keys/payment2.addr)+0 \
    --tx-out $(cat keys/payment1.addr)+0 \
    --invalid-hereafter 0 \
    --fee 0 \
    --out-file tx.draft

>>>gives this file:
{
    "type": "TxBodyAlonzo",
    "description": "",
    "cborHex": "86a6008182582041461790b6cb6f617d1bf6971bfd367726881f90fb1a5c9b3ab48657392addb9040d80018282581d60ec0060e4ac8c52bd5a5db1a1ebbb0dd5c310ade4abf30861e9a5f5ba0082581d603af452f6418df09ba6c4bf8fffc64e9fa423c998bbe9ff461229079000020003000e809fff8080f5f6"
}

The ccli command above does not interact with the cardano-node (I think..verify this by stoppping the cardano-node when executing this command).

>>> calculate the fee:
A simple transaction needs one input, a valid UTXO from payment.addr, and two outputs:

Output1: The address that receives the transaction.
Output2: The address that receives the change of the transaction.

./ccli transaction calculate-min-fee \
    --tx-body-file tx.draft \
    --tx-in-count 1 \
    --tx-out-count 2 \
    --witness-count 1 \
    --byron-witness-count 0 \
    --testnet-magic 1097911063 \
    --protocol-params-file protocol-test.json

>>> the output is telling us how much fee's this transaction will cost:
174433 Lovelace

>>>...which is 0.17 ADA

The ccli command above does not interact with the cardano-node (I think..verify this by stoppping the cardano-node when executing this command



>>> Calculate the changes to be sent back to  payment1.addr
>>> Assuming we are sendint 75 ADA to payment2.addr:
>>> (note we are using s simple Linux command for this calc (just for the prupose of documentation):
>>> (balance on payment1.addr - amount to send (75 ADA) - calculated fees)
LM> expr 1000000000 - 75000000 - 174433

>>> returns:
924825567   (= 924.82 ada)


>>> Determine the Time To Live for the transaction (specifying number of slots  to wait for a block before we give up):
LM>./ccli query tip --testnet-magic 1097911063

{
    "epoch": 198,
    "hash": "2c8404d7b196d03124a11d19d232b141cb61d5dcdcbadf518e8b52b9171deade",
    "slot": 55480179,
    "block": 3471230,
    "era": "Alonzo",
    "syncProgress": "100.00"
}

>>> Let's decide to wait 5000 slots (5000*20 seconds = 4000 seconds)
expr 55481134 + 5000

>>> gives the slot number we give up:
>>> IMPORTANT: the slot to specify must be after the current slot when you submit the transaction. If not, you will get an error (cant wait for something that has already pasted in time..)
55486134

>>> we create an updated transaction draft unlcuding this slot to give up, fees and the values to send to both receiver and sender (the change in return):

./ccli transaction build-raw \
    --tx-in 41461790b6cb6f617d1bf6971bfd367726881f90fb1a5c9b3ab48657392addb9#0 \
    --tx-out $(cat keys/payment2.addr)+75000000 \
    --tx-out $(cat keys/payment1.addr)+924825567 \
    --invalid-hereafter 55562612 \
    --fee 174433 \
    --out-file tx.raw


>>> this gives us this output representing the updated transaction (not yet posted...):
{
    "type": "TxBodyAlonzo",
    "description": "",
    "cborHex": "86a6008182582041461790b6cb6f617d1bf6971bfd367726881f90fb1a5c9b3ab48657392addb9040d80018282581d60ec0060e4ac8c52bd5a5db1a1ebbb0dd5c310ade4abf30861e9a5f5ba1a047868c082581d603af452f6418df09ba6c4bf8fffc64e9fa423c998bbe9ff46122907901a371fb7df021a0002a961031a034e903b0e809fff8080f5f6"
}

>>> Before sending the transaction, we must sign it with our private key:

./ccli transaction sign \
    --tx-body-file tx.raw \
    --signing-key-file keys/payment1.skey \
    --testnet-magic 1097911063 \
    --out-file tx.signed



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>>>> IMPORTAN>T: At this time, there has been no check against the blockchain (that is..Cardano-node ?) that the given "tx-in" actually has enough funds?
>>>> This can be proved by using amounts that exceeds the avilable 1000 ADA at the give n TxId:
./ccli transaction build-raw \
    --tx-in 41461790b6cb6f617d1bf6971bfd367726881f90fb1a5c9b3ab48657392addb9#0 \
    --tx-out $(cat keys/payment2.addr)+7500000000 \
    --tx-out $(cat keys/payment1.addr)+924825567 \
    --invalid-hereafter 55486025 \
    --fee 174433 \
    --out-file tx.raw.2

This works perfectly well! The tx.raw.2 file is created, even if the given amounts in this transaction far exceeds the available amount at the given input transaction.
This also implies that the given <TxIx> above (#1) is also not verfied at this stage. I could give anything here.
It's not until the transaction is being submitted (through cardano-node) that the cardano-node is actually verifying that the given amounts are "do-able": 
that the "--tx-in<TxId><#TxIx>" contains sufficient ADA to cover the amount given in this new transaction.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

>>> We now have the a signed transaction we can send:

{
    "type": "Tx AlonzoEra",
    "description": "",
    "cborHex": "84a6008182582041461790b6cb6f617d1bf6971bfd367726881f90fb1a5c9b3ab48657392addb9040d80018282581d60ec0060e4ac8c52bd5a5db1a1ebbb0dd5c310ade4abf30861e9a5f5ba1a047868c082581d603af452f6418df09ba6c4bf8fffc64e9fa423c998bbe9ff46122907901a371fb7df021a0002a961031a034e903b0e80a100818258202164927607f7f7659daa1054f5d9590f8349b55c558d502a65ea3e8f2a1232c958409e8e0a7f4207bd557bf34409ddf3b99c5803d985497997ff3bba3eff56c2392e93c08c34d9fe705a875ca714b30c6df42247ef6b3ee98902457da52be362110af5f6"
}


>>> Send the signed transaction:

LM>./ccli transaction submit \
    --tx-file tx.signed \
    --testnet-magic 1097911063


...and we get :
"Transaction successfully submitted."


>>>> now we need to wait ( maybe a little..) and verify the balance on both of my receiving addresses:


LM>./ccli query utxo --address $(cat keys/payment1.addr)  --testnet-magic 1097911063
                           TxHash                                 TxIx        Amount
--------------------------------------------------------------------------------------
38ec5a24d669ace28c550f5a2ff66b78b3d9aeb0d30470e2cb0b97b2dd73e795     1        924825567 lovelace + TxOutDatumNone

We can see the the amount on my first adress has been reduced with 75 ADA + fees, and that the seconds address has received 75ADA:


LM>./ccli query utxo --address $(cat keys/payment2.addr)  --testnet-magic 1097911063

                          TxHash                                 TxIx        Amount
--------------------------------------------------------------------------------------
38ec5a24d669ace28c550f5a2ff66b78b3d9aeb0d30470e2cb0b97b2dd73e795     0        75000000 lovelace + TxOutDatumNone



>>> and, check the cardano scan for the same by using the 2 receive addresses above:


>>> Mission acomplished!



### This is a tutorial that might explain what <TxIx> (index) is (...an index of the outputs using the transaction ..):
...well I figured thatbout by myself... ;-) "


https://emurgo.io/ja/blog/understanding-unspent-transaction-outputs-in-cardano


=======================================
Next use-cases:
1) creating a transaction that spends 2 UTXO's from one transaction.(sending all the change back to 1 address)
2) Creating a transaction that spends 2 UTXO's from 2 transactions (1 from each). (sending the changes evenly to both source addresses).
3) Creating a transaction that spends 2 UTXO's from 1 transaction , but the UTXO's are owned by 2 different signing keys (we need to sign by using 2 skey's).

Work todo:
---------------------------
Create a separater drwing tutorial of this. Don't want all of this in this file.

Is there an API towards Cardano-node?
    - BlockFrost?

What is PAB doing vs. all this?











